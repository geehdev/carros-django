* Um app √© um m√≥dulo que √© respons√°vel por administrar algo do projeto, podemos criar uma app pra cada funcionalidade do projeto.

üêß O QU√ä √â DJANGO?
- Framework Web;
- Para Python feito em Python;
- C√≥digo aberto (open source);
- Arquitetura MVT (Model, View e Templete);
- Full Stack;

üêß O QU√ä PODEMOS FAZER COM DJANGO? 
- Sites, Blogs, Redes Sociais;
- Sistemas Web completos;
- ERPs (Sistema completo pra gerenciar uma empresa);
- CRMs (Sistema de controle de atendimento);
- PDVs (Sistema de caixa de supermercado);
- APIs (DRF).

üêß Programa√ß√£o Orientada a Objetos (POO):
üî∏ Heran√ßa;
üî∏ Polimorfismo de Classe Python;
üî∏ Polimorfismo de interface Python;


üêß DJANGO COMMANDS:
>> django-admin --help:
- Mostra alguns comandos do django admin;

>> django-admin startproject <projectname>:
- Cria a estrutura b√°sica de um projeto Django (App principal, aqui fica o cora√ß√£o do projeto.) e ser√° criado os arquivos:

* manage.py (permite a voc√™ interagir com esse projeto Django de v√°rias maneiras.);

* __init__.py (um arquivo vazio que diz ao Python que este diret√≥rio deve ser considerado um pacote Python.);

* settings.py (configura√ß√µes do projeto Django);

* urls.py (as declara√ß√µes de URLs para este projeto Django);

>> python manage.py runserver:
- Inicia o servidor local de desenvolvimento (Test);

>> python manage.py startapp <appname>:
- Cria um diret√≥rio de aplicativo/app que ser√° respons√°vel por lidar com uma parte distinta do aplicativo, ser√° criado os arquivos:

* admin.py ();
* apps.py ();
* migrations/__init__.py ();

- Ap√≥s criar a app, devemos sinalizar para o Django a exist√™ncia dela, iremos na app principal, setting e adicionamos seu nome em INSTALLED_APPS.

>> python manage.py makemigrations:
- Usado para criar novos arquivos de migra√ß√£o de db com base nas altera√ß√µes feitas nos models, USAR TODA VEZ QUE FAZER ALTERA√á√ïES NOS MODELS.

>> python manage.py migrate:
- Aplica as migra√ß√µes de db e sincroniza as tabelas do db com o estado atual de seus models, USADO PARA APLICAR AS ALTERA√á√ïES DO MODEL CAPTURADAS POR makemigrations.

>> python manage.py createsuperuser:
- Criar uma conta de superusu√°rio para a interface de administra√ß√£o do Django. A conta de superusu√°rio tem privil√©gios administrativos e pode acessar e gerenciar todos os aspectos do site de administra√ß√£o do Django, incluindo o gerenciamento de usu√°rios, grupos, modelos e outros conte√∫dos do site. 


üêß CONFIGURANDO MODELS NO SITE ADMIN:
- Aqui deixaremos vis√≠vel os models em nosso painel de administrador, primeiro iremos no arquivo admin.py de nossa app e registraremos os models que queremos que apare√ßa no nosso site de admin.

- Subscrevemos os met√≥dos list_display e search_fields da heran√ßa do admin.ModelAdmin, por fim registramos com a fun√ß√£o admin.site.register.


üêß Models & ForeingnKey:
- ForeingnKey/ChaveEstrangeira √© uma restri√ß√£o SQL e um campo em uma tabela que cont√©m a PrimaryKey/ChavePrim√°ria de outra tabela.

- Usaremos ForeingnKey para ligar os dados de uma tabela em outra, pegamos esses dados e adicionamos no painel de admin, os dados aparece em um listbox (op√ß√£o de escolha);

- Para mostrar no painel de adm, devemos registrar o model em admin.py.

üêß ARMAZENANDO IMAGENS DOS CARROS:
- Cada upload de imagem que o usu√°rio fizer n√≥s salvamos elas em uma pasta no diret√≥rio do servidor e no banco de dados salvamos apenas o PATH da imagem.

üêß VIS√ÉO DE ADMIN VS VIS√ÉO DE USU√ÅRIO:
...

üêß ENTENDENDO URLS E VIEWS:
...

üêß REDENRIZANDO TEMPLATES:
- Devemos criar a pasta templates manualmente dentro da nossa app e usamos a fun√ß√£o render para retornar o template.

üêß LINGUAGEM DE TEMPLATES/MODELS DO DJANGO:
...

üêß CONSULTAS NO BANCO DE DADOS COM DJANGO ORM:
...

üêß PAR√ÇMETROS DA REQUEST / FAZENDO CONSULTAS COM FILTER():
...

üêß CONSULTAS COM ICONTAINS E ORDER_BY EM FILTER():
...

üêßCONFIGURANDO O BASE TEMPLATE: 
- Criado diret√≥rio "templates" dentro da app principal do projeto e depois vamos em settings.py na constante TEMPLATES e colocamos o path "app/templates" em DIRS.

üêß FORM NO DJANGO:
- Usado ModelChoiceField para declarar form com ForeignKey; 

- Objeto do form tem os atributos "as_table";
- request.POST, request.FILE;

üêßMIGRANDO PARA MODELFORM:
...

üêßVALIDA√á√ïES EM FORMS:
...

üêßAUTENTICA√á√ÉO NO DJANGO:
...


üêß REGISTRANDO USU√ÅRIOS:
- Usado form padr√£o do Django (UserCreationForm) para criar o form de cadastros de usu√°rios;

üêß CRIANDO A TELA DE LOGIN:
- Usado Form AuthenticationForm j√° existente do Django para autenticar login de usu√°rio;

- Usado m√©todo authenticate para verificar se o user existe no db, login() e logout();

üêß CLASS BASED VIEWS (CBVS):
...

üêß AUTORIZA√á√ÉO DAS VIEWS:
- Limitando acesso atr√°ves das urls;
- Usado decorators Django para proteger as views, method_decorator e login_required;

üêß SIGNALS | DJANGO:
...

üêß DJANGO E BANCO DE DADOS RELACIONAIS:
- Instalando PostgreSQL;
- Criando bando de dados Postgres atr√°ves do prompt psql do Postgres;


üêß DJANGO SHEL:
>> python manage.py shell;

üêß GIT / GITHUB / Deploy na AWS / Nginx;
...

~~ SQL ~~ SQL ~~ SQL ~~ SQL ~~ SQL ~~ SQL ~~ SQL:
* PRIMARY_KEY = Uma restri√ß√£o que identifica exclusivamente cada registro adicionado em uma tabela. 

* FOREIGNKEY = √â um campo (ou cole√ß√£o de campos) em uma tabela, que se refere a o PRIMARY KEY de outra table. 

